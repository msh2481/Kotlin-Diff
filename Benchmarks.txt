Время работы текущего алгоритма очень слабо зависит от L и D,
поэтому первые 4 и последние 4 запуска можно воспринимать
просто как серии запусков для уменьшения погрешности.

Основная версия
N = 10000, L = 30,	D = 100:	313 ms
N = 10000, L = 300,	D = 100:	258 ms
N = 10000, L = 30,	D = 10000:	217 ms
N = 10000, L = 300,	D = 10000:	241 ms
N = 16000, L = 30,	D = 1000:	580 ms
N = 16000, L = 300,	D = 1000:	518 ms
N = 16000, L = 30,	D = 16000:	557 ms
N = 16000, L = 300,	D = 16000:	516 ms

Далее изменения производятся независимо.
Измеряется результат с одним только этим изменением.

if -> max
N = 10000, L = 30,	D = 100:	387 ms
N = 10000, L = 300,	D = 100:	339 ms
N = 10000, L = 30,	D = 10000:	318 ms
N = 10000, L = 300,	D = 10000:	314 ms
N = 16000, L = 30,	D = 1000:	816 ms
N = 16000, L = 300,	D = 1000:	764 ms
N = 16000, L = 30,	D = 16000:	759 ms
N = 16000, L = 300,	D = 16000:	763 ms

ShortMatrix -> Array<ShortArray>
N = 10000, L = 30,	D = 100:	349 ms
N = 10000, L = 300,	D = 100:	283 ms
N = 10000, L = 30,	D = 10000:	281 ms
N = 10000, L = 300,	D = 10000:	293 ms
N = 16000, L = 30,	D = 1000:	692 ms
N = 16000, L = 300,	D = 1000:	717 ms
N = 16000, L = 30,	D = 16000:	701 ms
N = 16000, L = 300,	D = 16000:	744 ms

ShortMatrix -> Array<Array<Short>>
N = 10000, L = 30,	D = 100:	1378 ms
N = 10000, L = 300,	D = 100:	1347 ms
N = 10000, L = 30,	D = 10000:	1166 ms
N = 10000, L = 300,	D = 10000:	962 ms
при N = 16000 не хватило памяти